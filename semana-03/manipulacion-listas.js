// M√âTODO ¬¥concat¬¥ - sirve par concatenar dos listas
// Esto es una lista de compras de frutas
let listaDeCompras = ['üçé', 'üçê', 'üçå', 'üçà', 'üçâ', 'üçç', 'ü•≠', 'üçã', 'üçí'];
let listaDeComprasDeTia = ['üçé', 'üçá', 'üçì', 'üçä', 'ü••', 'ü•ù'];
// console.log(listaDeCompras.concat(listaDeComprasDeTia));

// M√âTODO ¬¥indexOf¬¥ - sirve para obtener el indice en base a un elemento
let nombresDePerros = ['Docky', 'Rocky', 'Pelusa', 'Scooby'];
// console.log(nombresDePerros.indexOf('Scooby'));

// M√âTODO ¬¥includes¬¥ - sirve para saber si un elemento est√° incluido dentro del arreglo
let pastillasRecetadas = [
	'Aspirina',
	'Paracetamol',
	'Omeprazol',
	'Ramipril',
	'Lansoprazol',
];

// Queremos saber si ¬¥Paracetamol¬¥ est√° incluida en las pastillas recetadas?
// 1er parametro es el elemento a buscar
// 2do parametro es desde donde empieza a buscar
console.log(pastillasRecetadas.includes('Paracetamol'));

// PROPIEDAD ¬¥length¬¥ - sirve para obtener o establecer la cantidad de elementos que tiene un arreglo
let listaDePerifericos = [
	'Mouse',
	'Micr√≥fono',
	'Teclado',
	'WebCam',
	'Aud√≠fonos',
];

console.log(listaDePerifericos.length);

// M√âTODO ¬¥join¬¥ - sirve para unir todos los elementos de un arreglo dentro de un string
let listaDeMarcasDeTelefonos = [
	'Nokia',
	'Xiaomi',
	'Samsung',
	'Apple',
	'Huawei',
];

console.log(listaDeMarcasDeTelefonos.join(', '));

// M√âTODO ¬¥toString¬¥ y ¬¥toLocaleString¬¥
let listaDePlanetas = ['Tierra', 'Jupiter', 'Marte', 'Saturno'];

console.log('toString ->', listaDePlanetas.toString());
console.log('toLocaleString ->', listaDePlanetas.toLocaleString());

// M√âTODO ¬¥unshift¬¥ - sirve para agregar uno o m√°s elementos al principio del arreglo
let listaDeNotas = [15, 16];

console.log('Las notas antes ->', listaDeNotas);
// agrega una nota al inicio
listaDeNotas.unshift(18);
console.log('Las notas despu√©s ->', listaDeNotas);

// M√âTODO ¬¥splice¬¥ - cambiar el contenido del arreglo o reemplazarlo por elementos existentes
let listaDeNumerosSplice = [1, 2, 3, 4, 5];
console.log('antes ->', listaDeNumerosSplice);
listaDeNumerosSplice.splice(1, 4, 'a', 'b', 'c', 'd');
console.log('despu√©s ->', listaDeNumerosSplice);

// M√âTODO ¬¥slice¬¥ - retorna una parte del arreglo sin modificarlo
let listaDeNumerosSlice = [5, 4, 3, 2, 1, 0];
console.log('antes ->', listaDeNumerosSlice);
console.log('despu√©s ->', listaDeNumerosSlice.slice(0, 4));

// M√âTODO ¬¥shift¬¥ - eliminar el primer elemento del areglo y lo devuelve
let listaDeNumerosShift = [11, 12, 13, 14, 15, 16];
console.log('antes ->', listaDeNumerosShift);
console.log('elemento eliminado ->', listaDeNumerosShift.shift());
console.log('despu√©s ->', listaDeNumerosShift);

// M√âTODO ¬¥reverse¬¥ - revierte un arreglo
let listaDePesoDeCajasReverse = ['1kg', '2kg', '3kg', '4kg', '5kg'];
console.log('antes ->', listaDePesoDeCajasReverse);
listaDePesoDeCajasReverse.reverse();
console.log('despu√©s ->', listaDePesoDeCajasReverse);

// M√âTODO ¬¥push¬¥
let listaDeCosasParaHacer = [
	'Limpiar tu cuarto',
	'Limpiar Cocina',
	'Ordenar escritorio',
];
console.log('antes ->', listaDeCosasParaHacer);
listaDeCosasParaHacer.push('Limpiar tu teclado');
console.log('despu√©s ->', listaDeCosasParaHacer);

// M√âTODO ¬¥fill¬¥
let listaDeNumerosFill = [1, 2, 3, 4, 5];
console.log('antes ->', listaDeNumerosFill);
listaDeNumerosFill.fill(6, 3, 4);
console.log('despu√©s ->', listaDeNumerosFill);

// M√âTODO ¬¥filter¬¥
let listaDeNumerosFilter = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
console.log('antes ->', listaDeNumerosFilter);
let listaDeNumerosFilterFiltrado = listaDeNumerosFilter.filter(
	(valor) => valor > 5
);
console.log('despu√©s ->', listaDeNumerosFilterFiltrado);

// M√âTODO ¬¥sort¬¥ - sirve para ordenar en base a una condici√≥n
let listaDeNumerosSort = [10, 1, 3, 33, 20, 87, 98, 5, 4, 12, 41, 0];
console.log('antes ->', listaDeNumerosSort);
listaDeNumerosSort.sort(
	(numeroAnterior, numeroPosterior) => numeroPosterior - numeroAnterior
);
console.log('despu√©s ->', listaDeNumerosSort);

// M√âTODO ¬¥every¬¥
let listaDeNumerosEvery = [2, 4, 6, 8, 10, 12];
console.log('antes ->', listaDeNumerosEvery);
let listaDeNumerosEveryCompletado = listaDeNumerosEvery.every(
	(valor) => valor % 2 === 0
);
console.log('despu√©s ->', listaDeNumerosEveryCompletado);

// M√âTODO ¬¥find¬¥
let listaDeNumerosFind = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
console.log('antes ->', listaDeNumerosFind);
let listaDeNumerosFindCompletado = listaDeNumerosFind.find(
	(valor) => valor > 2
);
console.log('despu√©s ->', listaDeNumerosFindCompletado);

// M√âTODO ¬¥findIndex¬¥
let listaDeNumerosFindIndex = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
console.log('antes ->', listaDeNumerosFindIndex);
let listaDeNumerosFindIndexCompletado = listaDeNumerosFindIndex.findIndex(
	(valor) => valor > 2
);
console.log('despu√©s ->', listaDeNumerosFindIndexCompletado);

// M√âTODO ¬¥map¬¥
let listaDeNumerosMap = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
console.log('antes ->', listaDeNumerosMap);
let listaDeNumerosMapCompletado = listaDeNumerosMap.map((valor) => valor * 2);
console.log('despu√©s ->', listaDeNumerosMapCompletado);

// M√âTODO ¬¥pop¬¥ - elimina y devuelve el ultimo elemento de arreglo
let listaDeNumerosPop = [1, 2, 3, 4, 5, 6];
console.log('antes ->', listaDeNumerosPop);
listaDeNumerosPop.pop();
console.log('despu√©s ->', listaDeNumerosPop);

// M√âTODO ¬¥reduce¬¥
let listaDeNumerosReduce = [1, 2, 3, 4, 5];

console.log('antes ->', listaDeNumerosReduce);
let listaDeNumerosReduceCompletado = listaDeNumerosReduce.reduce(
	(acumulador, valorActual) => acumulador + valorActual,
	0
);
console.log('despu√©s ->', listaDeNumerosReduceCompletado);

// M√âTODO ¬¥reduceRight¬¥
let listaDeNumerosReduceRight = [1, 2, 3, 4, 5];
console.log('antes ->', listaDeNumerosReduceRight);
let listaDeNumerosReduceRightCompletado = listaDeNumerosReduceRight.reduceRight(
	(valorAnterior, valorActual) => valorAnterior + valorActual,
	0
);
console.log('despu√©s ->', listaDeNumerosReduceRightCompletado);

// M√âTODO ¬¥some¬¥
let listaDeNumerosSome = [5, 10, 15, 20, 25];
console.log('antes ->', listaDeNumerosSome);
let listaDeNumerosSomeCompletado = listaDeNumerosSome.some(
	(valor) => valor % 2 === 0
);
console.log('despu√©s ->', listaDeNumerosSomeCompletado);

// M√âTODO ¬¥flat¬¥
let listaDeNumerosFlat = [1, [2, 3], [4, [5, 6]]];
console.log('antes ->', listaDeNumerosFlat);
let listaDeNumerosFlatCompletado = listaDeNumerosFlat.flat().flat();
console.log('despu√©s ->', listaDeNumerosFlatCompletado);

// M√âTODO ¬¥flatMap¬¥
let listaDeNumerosFlatMap = [1, 2, 3, 4, 5];

console.log('antes ->', listaDeNumerosFlatMap);
let listaDeNumerosFlatMapCompletado = listaDeNumerosFlatMap.flatMap((valor) => [
	valor,
	valor * 2,
]);
console.log('despu√©s ->', listaDeNumerosFlatMapCompletado);

// M√âTODO ¬¥entries¬¥
let listaDeNumerosEntries = ['a', 'b', 'c', 'd', 'e'];

for (const [indice, valor] of listaDeNumerosEntries.entries()) {
	console.log(`Indice: ${indice}, Valor: ${valor}`);
}

// M√âTODO ¬¥keys¬¥
let listaDeNumerosKeys = [1, 2, 3, 4, 5];

for (const indice of listaDeNumerosKeys.keys()) {
	console.log(`Indice: ${indice}`);
}

// M√âTODO ¬¥values¬¥
let listaDeNumerosValues = [1, 2, 3, 4, 5];

for (const indice of listaDeNumerosValues.values()) {
	console.log(`valor: ${indice}`);
}

// M√âTODO ¬¥copyWithin¬¥
let listaDeNumerosCopyWithin = [1, 2, 3, 4, 5];
console.log('antes ->', listaDeNumerosCopyWithin);
listaDeNumerosCopyWithin.copyWithin(0, 3, 5);
console.log('despu√©s ->', listaDeNumerosCopyWithin);

// M√âTODO ¬¥lastIndexOf¬¥ - devuelve el √∫ltimo indice de x valor
let listaDeNumerosLastIndexOf = [1, 2, 3, 4, 5, 3];

console.log(listaDeNumerosLastIndexOf.lastIndexOf(3));

// HACKATON: Manipulando Listas (Arreglos)

/**
 1. Eliminar duplicados en una lista (pueden ser numeros o strings)
 2. Mayor producto de tres n√∫meros: Dada una lista de n√∫meros enteros, encuentra el mayor
    producto que se puede obtener al multiplicar tres de esos n√∫meros.
 3. Ordenar lista de objetos personalizados: Supongamos que tienes una lista de objetos
    personalizados y deseas ordenarlos seg√∫n un atributo espec√≠fico de cada objeto.
    Escribe una funci√≥n que permita ordenar la lista en funci√≥n de ese atributo.
 4. Subconjunto con suma m√°xima: Dada una lista de n√∫meros enteros, encuentra el subconjunto
    no vac√≠o de elementos contiguos cuya suma sea m√°xima.
 5. Encontrar el n√∫mero que falta: Tienes una lista de n√∫meros enteros que contiene todos
    los n√∫meros del 1 al n, excepto uno. Encontrar el n√∫mero que falta en la lista.
 */
